{
  "sksl": {
    "entrypoint": "glyph_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform float iTime;\nuniform vec2 iResolution;\nuniform float uIntensity;\nuniform float uSpeed;\nuniform float uRotationSpeed;\nuniform float uThreshold;\nuniform float uComplex;\nuniform float uColorBias;\nuniform float uZoom;\nuniform float uInvert;\nuniform float uBloom;\nuniform float uPower;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec2 FLT_flutter_local_rotate2D(vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return vec2((c * p.x) - (s * p.y), (s * p.x) + (c * p.y));\n}\n\nfloat FLT_flutter_local_mapFunc(inout vec3 p)\n{\n    for (int i = 0; i < 64; i++)\n    {\n        if (float(i) > uComplex)\n        {\n            break;\n        }\n        float t = (iTime * 0.20000000298023223876953125) * uSpeed;\n        vec2 param = p.xz;\n        float param_1 = t;\n        vec2 _117 = FLT_flutter_local_rotate2D(param, param_1);\n        p.x = _117.x;\n        p.z = _117.y;\n        vec2 param_2 = vec2(p.x, p.y);\n        float param_3 = t * 1.88999998569488525390625;\n        vec2 tmpXY = FLT_flutter_local_rotate2D(param_2, param_3);\n        p.x = tmpXY.x;\n        p.y = tmpXY.y;\n        vec3 _141 = p;\n        vec2 _143 = abs(_141.xz);\n        p.x = _143.x;\n        p.z = _143.y;\n        vec3 _149 = p;\n        vec2 _152 = _149.xz - vec2(0.5);\n        p.x = _152.x;\n        p.z = _152.y;\n    }\n    return dot(sign(p), p) / uBloom;\n}\n\nvec3 FLT_flutter_local_palette(float d)\n{\n    return mix(color1, color2, vec3(d));\n}\n\nvec4 FLT_flutter_local_raymarch(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    float d = 0.0;\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < 64; i++)\n    {\n        vec3 p = ro + (rd * t);\n        vec3 param = p;\n        float _190 = FLT_flutter_local_mapFunc(param);\n        d = _190 * 1.0;\n        if (d < uThreshold)\n        {\n            break;\n        }\n        if (d > 100.0)\n        {\n            break;\n        }\n        float param_1 = (length(p) * (1.0 / uComplex)) * uColorBias;\n        col += (FLT_flutter_local_palette(param_1) / vec3((uIntensity * d) * 1.0));\n        t += d;\n    }\n    return pow(vec4(col, 1.0 / (d * 100.0)), vec4(uPower));\n}\n\nvoid FLT_main()\n{\n    vec2 fragCoord = FLT_flutter_local_FlutterFragCoord();\n    vec2 uv = (fragCoord - (iResolution * 0.5)) / vec2(iResolution.x);\n    vec3 ro_1 = vec3(0.0, 0.0, -50.0);\n    vec2 param_2 = ro_1.xz;\n    float param_3 = iTime * uRotationSpeed;\n    vec2 _268 = FLT_flutter_local_rotate2D(param_2, param_3);\n    ro_1.x = _268.x;\n    ro_1.z = _268.y;\n    vec3 forward = normalize(-ro_1);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(forward, right));\n    vec3 center = ro_1 + (forward * ((1.0 / (uComplex * 0.100000001490116119384765625)) * uZoom));\n    vec3 uuv = (center + (right * uv.x)) + (up * uv.y);\n    vec3 rd_1 = normalize(uuv - ro_1);\n    vec3 param_4 = ro_1;\n    vec3 param_5 = rd_1;\n    vec4 color = FLT_flutter_local_raymarch(param_4, param_5);\n    fragColor = vec4(color.xyz * uInvert, color.w);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "uIntensity",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "uSpeed",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "uRotationSpeed",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "uThreshold",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "uComplex",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "uColorBias",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "uZoom",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "uInvert",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "uBloom",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 11,
        "name": "uPower",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 12,
        "name": "color1",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 13,
        "name": "color2",
        "rows": 3,
        "type": 10
      }
    ]
  }
}